import asyncio
import datetime
import os
import psycopg2

from dotenv import load_dotenv
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

load_dotenv('.env')

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL
db_name = os.getenv("DB_NAME")
db_user = os.getenv("DB_USER")
db_password = os.getenv("DB_PASSWORD")
db_host = os.getenv("DB_HOST")
db_port = os.getenv("DB_PORT")
bot_token = os.getenv("BOT_TOKEN")

conn = psycopg2.connect(database=db_name, user=db_user, password=db_password, host=db_host, port=db_port)
cur = conn.cursor()

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=bot_token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

admin_ids = [367150414]

formatted_date = None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    if message.from_user.id in admin_ids:
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            types.InlineKeyboardButton(text="–ë–∞—Ä–±–µ—Ä", callback_data="admin"),
            types.InlineKeyboardButton(text="–ö–ª–∏–µ–Ω—Ç", callback_data="client")
        )
        await message.answer("–ü–æ–¥ –∫–∞–∫–æ–π —Ä–æ–ª—å—é —Ö–æ—á–µ—à—å –∑–∞–π—Ç–∏?", reply_markup=keyboard)
    else:
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            types.InlineKeyboardButton(text="‚úÇÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É ‚úÇÔ∏è", callback_data="book_cut"),
            types.InlineKeyboardButton(text="üìç –£–∑–Ω–∞—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üìç", callback_data="get_location"),
            types.InlineKeyboardButton(text="üíµ –£–∑–Ω–∞—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç üíµ", callback_data="get_price_list"),
            types.InlineKeyboardButton(text="üìÖ –ú–æ–∏ –∑–∞–ø–∏—Å–∏ üìÖ", callback_data="get_appointments")
        )
        bold_name = f"<b>{message.from_user.first_name}</b>"
        await message.answer(f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {bold_name}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? ü§î", reply_markup=keyboard, parse_mode="html")


@dp.callback_query_handler(lambda callback_query: callback_query.data == "admin")
async def admin_callback(query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton(text="‚úÇÔ∏è –ö—Ç–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–∞–Ω ‚úÇÔ∏è", callback_data="today_book"))
    await bot.send_message(chat_id=query.from_user.id, text=f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, *{query.from_user.first_name}*!", reply_markup=keyboard, parse_mode=types.ParseMode.MARKDOWN)


@dp.callback_query_handler(lambda callback_query: callback_query.data == "client")
async def client_callback(query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton(text="‚úÇÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É ‚úÇÔ∏è", callback_data="book_cut"),
        types.InlineKeyboardButton(text="üìç –£–∑–Ω–∞—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üìç", callback_data="get_location"),
        types.InlineKeyboardButton(text="üíµ –£–∑–Ω–∞—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç üíµ", callback_data="get_price_list"),
        types.InlineKeyboardButton(text="üìÖ –ú–æ–∏ –∑–∞–ø–∏—Å–∏ üìÖ", callback_data="get_appointments")
    )
    bold_name = f"<b>{query.from_user.first_name}</b>"
    await bot.send_message(chat_id=query.from_user.id, text=f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {bold_name}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? ü§î", reply_markup=keyboard, parse_mode="html")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ö—Ç–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–∞–Ω"
@dp.callback_query_handler(lambda callback_query: callback_query.data == "today_book")
async def today_book_callback(callback_query: types.CallbackQuery):
    if callback_query.from_user.id in admin_ids:
        today = datetime.date.today()
        cur.execute("SELECT time, user_name FROM schedule WHERE date = %s AND user_name IS NOT NULL", (today,))
        results = cur.fetchall()

        if results:
            info = [f"- {time} - {user_name}" for time, user_name in results]
            info_str = '\n'.join(info)
            await bot.send_message(callback_query.from_user.id, f"–ö —Ç–µ–±–µ {today} –ø—Ä–∏–¥—É—Ç:\n{info_str}")
        else:
            await bot.send_message(callback_query.from_user.id, f"–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π ü§∑üèª‚Äç‚ôÇÔ∏è")


@dp.callback_query_handler(lambda query: query.data == "book_cut")
async def schedule_appointment(query: types.CallbackQuery):
    user_id = query.from_user.id
    cur.execute("SELECT COUNT(*) FROM schedule WHERE user_id = %s", (user_id,))
    count = cur.fetchone()[0]
    if count >= 3:
        cur.execute("SELECT date, time FROM schedule WHERE user_id = %s", (user_id,))
        appointments = cur.fetchall()
        message = "–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ 3 —Å—Ç—Ä–∏–∂–∫–∏:\n"
        for appointment in appointments:
            appointment_date = appointment[0].strftime("%d.%m.%Y")
            appointment_time = appointment[1].strftime("%H:%M")
            message += f"‚Ä¢ {appointment_date} –≤ {appointment_time}\n"
        await bot.answer_callback_query(query.id)
        await bot.send_message(chat_id=query.message.chat.id, text=message)
    else:
        await bot.answer_callback_query(query.id)
        await bot.send_message(chat_id=query.message.chat.id,
                               text="–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –∑–∞–ø–∏—Å–∞—Ç—å? üßê –Ø —Ä–∞–±–æ—Ç–∞—é –ø–æ –≤—Ç–æ—Ä–Ω–∏–∫–∞–º, —Å—Ä–µ–¥–∞–º, –ø—è—Ç–Ω–∏—Ü–∞–º –∏ —Å—É–±–±–æ—Ç–∞–º.")
        await bot.send_message(chat_id=query.message.chat.id,
                               text="_–ü—Ä–∏–º–µ—Ä –¥–∞—Ç—ã: 01.08.2023_", parse_mode=types.ParseMode.MARKDOWN)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞—Ç–æ–π
@dp.message_handler(lambda message: message.text and "." in message.text)
async def check_available_hours(message: types.Message):
    global formatted_date
    date_str = message.text
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î
    date_str = datetime.datetime.strptime(date_str, "%d.%m.%Y")
    formatted_date = date_str.strftime("%Y-%m-%d")
    cur.execute("SELECT time FROM schedule WHERE date = %s AND is_available = TRUE", (formatted_date,))
    available_times = [row[0] for row in cur.fetchall()]

    if not available_times:
        await bot.send_message(chat_id=message.chat.id, text="–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ü§∑üèª‚Äç‚ôÇÔ∏è, –ø–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    keyboard = InlineKeyboardMarkup(row_width=3)
    for available_time in available_times:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å—Ç—Ä–æ–∫—É
        time_str = available_time.strftime("%H:%M")
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º
        button = InlineKeyboardButton(text=time_str, callback_data=f"book_cut_{time_str}")
        keyboard.add(button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(chat_id=message.chat.id, text="–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∞—Ç—å? ü§î", reply_markup=keyboard)


@dp.callback_query_handler(lambda query: query.data.startswith("book_cut_"))
async def confirm_appointment(query: types.CallbackQuery):
    user_id = query.from_user.id
    user_name = query.from_user.full_name
    tg_username = query.from_user.username
    user_first_name = query.from_user.first_name

    formatted_date_str = datetime.datetime.strptime(formatted_date, "%Y-%m-%d").strftime("%d.%m.%Y")

    time_str = query.data.split("_")[2]

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—ä–µ–∫—Ç datetime.time
    time = datetime.datetime.strptime(time_str, "%H:%M").time()

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç —á—á:–º–º:—Å—Å
    formatted_time = time.strftime("%H:%M:%S")

    formatted_time_str = time.strftime("%H:%M")

    cur.execute("""
        UPDATE schedule SET is_available = FALSE, user_id = %s, user_name = %s, tg_username = %s WHERE date = %s AND time = %s
    """, (user_id, user_name, tg_username, formatted_date, formatted_time))

    conn.commit()

    await query.message.answer(f"*{user_first_name}*, –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É *{formatted_date_str}* –≤ *{formatted_time_str}*!", parse_mode=types.ParseMode.MARKDOWN)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "–£–∑–Ω–∞—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
@dp.callback_query_handler(lambda query: query.data == "get_location")
async def get_location(query: types.CallbackQuery):
    await bot.answer_callback_query(query.id)
    location_text = "üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n–≥. –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫, —É–ª. –ë–µ—Ä—ë–∑–æ–≤–∞—è, 20"
    location_url = "https://2gis.ru/vladivostok/directions/points/%7C131.893943%2C43.103735%3B70030076179627104?m=131.909635%2C43.117332%2F14.02"

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π "–ü—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç"
    markup = types.InlineKeyboardMarkup()
    route_button = types.InlineKeyboardButton(text="–ü—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", url=location_url)
    markup.add(route_button)

    await bot.send_message(query.from_user.id, text=location_text, reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "–£–∑–Ω–∞—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç"
@dp.callback_query_handler(lambda query: query.data == "get_price_list")
async def get_price_list(query: types.CallbackQuery):
    await bot.answer_callback_query(query.id)
    price_list = "–°—Ç—Ä–∏–∂–∫–∞ - 1500 ‚ÇΩ\n–ë–æ—Ä–æ–¥–∞ - 1000 ‚ÇΩ\n–ö–æ–º–ø–ª–µ–∫—Å - 2200 ‚ÇΩ\n–ú–∞—Å–∫–∞ - 500 ‚ÇΩ\n–í–æ—Å–∫ - 200 ‚ÇΩ"
    await bot.send_message(query.from_user.id, text=price_list)


@dp.callback_query_handler(lambda query: query.data == "get_appointments")
async def get_appointments(query: types.CallbackQuery, state: FSMContext):
    user_id = query.from_user.id
    cur.execute("SELECT date, time FROM schedule WHERE user_id = %s", (user_id,))
    appointments = cur.fetchall()

    if not appointments:
        await query.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É ü§∑üèª‚Äç‚ôÇÔ∏è")
        return

    message_text = "–í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É:\n\n"
    for appointment in appointments:
        date_str = appointment[0].strftime("%d.%m.%Y")
        time_str = appointment[1].strftime("%H:%M")
        message_text += f"‚Ä¢ {date_str} –≤ {time_str}\n"

    # –°–æ–∑–¥–∞–π—Ç–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å" –∏ "–ù–∞–∑–∞–¥"
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    cancel_button = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="cancel_appointment")
    back_button = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")
    keyboard.add(cancel_button, back_button)

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(appointments=appointments)

    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø–∏—Å—è–º–∏ –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
    await query.message.edit_text(message_text, reply_markup=keyboard)


@dp.callback_query_handler(lambda query: query.data == "cancel_appointment", state="*")
async def cancel_appointment(query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    appointments = data.get("appointments")

    if not appointments:
        await query.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É ü§∑üèª‚Äç‚ôÇÔ∏è")
        return

    # –°–æ–∑–¥–∞–π—Ç–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É
    keyboard = types.InlineKeyboardMarkup()
    for i, appointment in enumerate(appointments):
        date_str = appointment[0].strftime("%d.%m.%Y")
        time_str = appointment[1].strftime("%H:%M")
        button = types.InlineKeyboardButton(f"{date_str} –≤ {time_str}", callback_data=f"cancel_{i}")
        keyboard.add(button)

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(cancel=True)

    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –æ—Ç–º–µ–Ω—É
    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å:", reply_markup=keyboard)


@dp.callback_query_handler(lambda query: query.data.startswith("cancel_"), state="*")
async def confirm_cancel(query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    appointments = data.get("appointments")
    cancel = data.get("cancel")

    if not cancel or not appointments:
        return

    # –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω–¥–µ–∫—Å –∑–∞–ø–∏—Å–∏ –Ω–∞ –æ—Ç–º–µ–Ω—É –∏–∑ callback_data
    index = int(query.data.split("_")[1])

    # –û–±–Ω–æ–≤–∏—Ç–µ –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å is_available –≤ TRUE
    appointment = appointments[index]
    cur.execute("UPDATE schedule SET user_name = NULL, user_id = NULL, user_phone = NULL, is_available = TRUE WHERE date = %s AND time = %s", (appointment[0], appointment[1]))
    conn.commit()

    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏
    date_str = appointment[0].strftime("%d.%m.%Y")
    time_str = appointment[1].strftime("%H:%M")
    await query.message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ *{date_str}* –≤ *{time_str}*.", parse_mode=types.ParseMode.MARKDOWN)

    # –û—á–∏—Å—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.reset_state()


@dp.callback_query_handler(lambda query: query.data == "back")
async def back_handler(query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton(text="‚úÇÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É ‚úÇÔ∏è", callback_data="book_cut"),
        types.InlineKeyboardButton(text="üìç –£–∑–Ω–∞—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üìç", callback_data="get_location"),
        types.InlineKeyboardButton(text="üíµ –£–∑–Ω–∞—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç üíµ", callback_data="get_price_list"),
        types.InlineKeyboardButton(text="üìÖ –ú–æ–∏ –∑–∞–ø–∏—Å–∏ üìÖ", callback_data="get_appointments")
    )
    bold_name = f"<b>{query.from_user.first_name}</b>"
    await query.message.answer(f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {bold_name}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? ü§î", reply_markup=keyboard, parse_mode="html")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling()


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
